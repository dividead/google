// Новогоднее такси

// Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
// Все языки	1.5 секунд	64Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
// Python 2.7	3 секунды	64Mb
// Python 3.6	3 секунды	64Mb
// Oracle Java 8	3 секунды	64Mb
// Водители такси хотят пораньше уйти домой 31 декабря. Диспетчеры решили помочь им в этом и распределить заказы так, чтобы последний ушедший с линии водитель сделал это как можно раньше.
// Напишите программу, которая поможет раздать всем водителям по одному заказу, чтобы время завершения последнего было минимальным.
// Перемещение из точки 
// (
// X
// 1
// ,
// Y
// 1
// )
//  в точку 
// (
// X
// 2
// ,
// Y
// 2
// )
//  занимает 
// |
// X
// 1
// −
// X
// 2
// |
// +
// |
// Y
// 1
// −
// Y
// 2
// |
//  минут. Посадка пассажира занимает 
// 0
//  минут.
// Формат ввода

// На первой строке одно число 
// N
//  (
// 1
// ≤
// N
// ≤
// 3
// 0
// 0
// )
// Далее следует 
// N
//  строк с координатами машин на момент времени 
// 0
// , разделенными пробелами 
// X
// Y
// (
// 1
// ≤
// X
// ,
// Y
// ≤
// 1
// 0
// 9
// )
// Далее следует 
// N
//  строк с координатами начала и конца поездок, разделенными пробелами 
// X
// 1
// Y
// 1
// X
// 2
// Y
// 2
//  (
// 1
// ≤
// X
// 1
// ≤
// X
// 2
// ≤
// 1
// 0
// 9
// ,
// 1
// ≤
// Y
// 1
// ≤
// Y
// 2
// ≤
// 1
// 0
// 9
// )
// Формат вывода

// Ответ должен содеражать ровно 
// N
//  строк, на каждой из которых одно число 
// O
//  - номер заказа, который должен выполнить i-й водитель. Нумерация заказов с 
// 1
// .
// Если есть несколько возможных решений, выведите любое из них.
// Пример 1

// Ввод	Вывод
// 1
// 1 1
// 2 2 3 3
// 1
// Пример 2

// Ввод	Вывод
// 2
// 1 1
// 2 2
// 2 2 3 3
// 1 1 3 3
// 2
// 1
// Пример 3

// Ввод	Вывод
// 3
// 100 100
// 200 200
// 300 300
// 190 230 180 220
// 190 190 400 400
// 249 249 700 700
// 2
// 3
// 1

function taxi(n, drivers, dst) {
  let res = []
  let taken = new Set()
  for (let i = drivers.length - 1; i >= 0; i--) {
    let min = Infinity
    let b = drivers[i]
    let n = 0
    for (let k = 0; k < dst.length; k++) {
      if (taken.has(k)) {
        continue
      }
      let [x1, y1, x2, y2] = dst[k]
      let total = Math.abs(x1 - x2) + Math.abs(y1 - y2) + Math.abs(b[0] - x1) + Math.abs(b[1] - y1)
      if (total < min) {
        min = total
        n = k
      }
    }
    res.unshift(n + 1)
    taken.add(n)
  }
  console.log(res)
}

taxi(3,
  [
    [100, 100], [200, 200], [300, 300]
  ], [
    [190, 230, 180, 220],
    [190, 190, 400, 400],
    [249, 249, 700, 700]])
// 2 3 1


// driver 1
// // { i: 1, total: 240, pickup: 220, xy: 1 }
// { i: 1, total: 600, pickup: 180, xy: 2 }
// { i: 1, total: 1200, pickup: 298, xy: 3 }
// driver 2
// // { i: 2, total: 60, pickup: 40, xy: 1 }
// { i: 2, total: 440, pickup: 20, xy: 2 }
// { i: 2, total: 1000, pickup: 98, xy: 3 }
// driver 3
// { i: 3, total: 200, pickup: 180, xy: 1 } // pick 1
// { i: 3, total: 640, pickup: 220, xy: 2 }
// { i: 3, total: 1004, pickup: 102, xy: 3 }